{"version":3,"sources":["containers/inWorks/index.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","minWidth","display","verticalAlign","backgroundColor","width","margin","padding","title","fontSize","color","action","marginTop","height","input_text","lineHeight","border","input_rewrite","text","boxShadow","InWork","name","prev","React","useState","open","open_dialog","card_name","set_card_name","index","set_index","inWork","add_to_inWork","card","add_card","text_inWork","add_text_inWork","text_rev","add_text_rev","handleClose","classes","Card","className","map","i","onClick","a","one","b","two","c","Button","placeholder","wrap","rows","cols","onChange","e","target","value","size","new_text","concat","add_new_card","variant","Dialog","maxWidth","fullWidth","onClose","aria-labelledby","aria-describedby","DialogTitle","id","style","float","marginRight","DialogContent","paddingTop","s","filter","saveTocard","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cb7b5cbf.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport '../../App.css';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 275,\r\n    display: 'inline-block',\r\n    verticalAlign: 'top',\r\n    backgroundColor: '#D4D4D4',\r\n    width: '28.5%',\r\n    margin: '10px',\r\n    padding: '20px'\r\n  },\r\n  title: {\r\n    fontSize: 15,\r\n    color: '#404B5A',\r\n    margin: 0\r\n  },\r\n  action: {\r\n   padding: '0 5px',\r\n   marginTop: '10px',\r\n   height: 50\r\n  \r\n  },\r\n  input_text: {   \r\n    padding: 10,\r\n   \r\n    display: 'block', \r\n    width: '95%', \r\n    fontSize: '15px',\r\n    lineHeight: '18px',\r\n    backgroundColor: '#fff',    \r\n    margin: '10px 0',\r\n    border: 'none'\r\n  },  \r\n  input_rewrite: {   \r\n    padding: 10,\r\n    display: 'block', \r\n    width: '95%',\r\n    color: \"#000\", \r\n    fontSize: 'medium',\r\n    backgroundColor: '#fff',    \r\n    margin: '10px 0',\r\n    border: 'none'\r\n  },  \r\n  text: {     \r\n    padding: 10,\r\n    fontSize: 'medium',\r\n    backgroundColor: '#fff',    \r\n    margin: '10px 0 0',\r\n    boxShadow: '0px 1px 1px rgba(0, 0, 0, 0.25)',\r\n  } \r\n});\r\n\r\n\r\nconst InWork = ({name,prev}) => {\r\n  const [open, open_dialog] = React.useState(false);\r\n  const [card_name, set_card_name] = React.useState();\r\n  const [index, set_index] = React.useState();\r\n  \r\n\r\n  const [inWork, add_to_inWork] = React.useState(prev);\r\n  const [card, add_card] = React.useState(true);\r\n  const [text_inWork, add_text_inWork] = React.useState();\r\n  const [text_rev, add_text_rev] = React.useState();\r\n  \r\n\r\n  const saveTocard =(a)=> {    \r\n    \r\n        var s = inWork\r\n        .filter((i,index)=>index === a ? i.two = text_rev : i.two)\r\n        .filter((i,index)=>index === a ? i.one = card_name : i.one);\r\n       \r\n       return (\r\n          add_to_inWork(s)\r\n       )\r\n    \r\n  };\r\n\r\n  const addTextInRev =(value)=>{\r\n    add_text_rev(value)\r\n  };\r\n\r\n  const handleClose =() => {\r\n    open_dialog(false)\r\n  };\r\n\r\n  const write_to_card = (a,b,c) => {\r\n    return (\r\n      open_dialog(true),     \r\n      set_card_name(a),\r\n      add_text_rev(b),\r\n      set_index(c)\r\n    )  \r\n  };\r\n\r\n  const add_new_card = () => {\r\n    var new_text = [{\"one\": text_inWork}];\r\n    return (\r\n      text_inWork ?      \r\n      (add_to_inWork(inWork.concat(new_text)),\r\n      add_card(true))\r\n      :\r\n      add_card(true)\r\n    );\r\n  };\r\n    const classes = useStyles();\r\n    return (\r\n    <Card className={classes.root}>     \r\n      <p className={classes.title}>{name}</p>\r\n      {inWork.map((i,index)=> <p className={classes.text} onClick={()=>write_to_card(i.one,i.two,index)}>{i.one}</p>)}  \r\n     \r\n     \r\n      {card ?        \r\n        <Button  className={classes.action} onClick={()=>add_card(false)}>\r\n          <span className=\"plus\">+</span>\r\n          Добавить еще одну карточку\r\n        </Button>        \r\n      : \r\n        <>\r\n          <textarea placeholder=\"Введите техт\" wrap=\"soft\" rows=\"1\" cols=\"30\" className={classes.input_text} onChange={(e)=>add_text_inWork(e.target.value)} />\r\n         \r\n          <Button size=\"medium\" onClick={()=>add_new_card()} variant=\"contained\" color=\"primary\">\r\n            Добавить карточку        \r\n          </Button>\r\n          <Button size=\"medium\" onClick={()=>add_card(true)} >\r\n            X Отмена      \r\n          </Button>\r\n        </>\r\n      }\r\n        <Dialog\r\n            open={open}\r\n            maxWidth=\"sm\"       \r\n            fullWidth=\"true\"\r\n            onClose={handleClose}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n        <DialogTitle id=\"alert-dialog-title\"  style={{backgroundColor:\"#d4d4d4\"}}>\r\n          <p style={{margin: 0,color: '#000',fontSize: 24}}>\r\n            \r\n            <Button onClick={handleClose} color=\"primary\" style={{float:\"right\",marginTop: '-15px',marginRight: '-20px'}}>\r\n              X\r\n            </Button>\r\n            <input className={classes.input_text} value={card_name} onChange={(e)=>set_card_name(e.target.value)} />\r\n          </p>\r\n        </DialogTitle>\r\n        <DialogContent  style={{backgroundColor:\"#d4d4d4\",padding:\"0 24px\"}}>         \r\n          <textarea\r\n            value={text_rev} rows=\"5\" cols=\"20\"\r\n            style={{fontSize: 15,color: '#989898'}}\r\n            className={classes.input_rewrite}\r\n            onChange={(e)=>addTextInRev(e.target.value)} \r\n          />\r\n         \r\n        </DialogContent>\r\n        <DialogTitle  style={{backgroundColor:\"#d4d4d4\",paddingTop: 0}}>\r\n          <p>\r\n          <Button onClick={()=>saveTocard(index)} color=\"primary\" variant=\"contained\" style={{float:\"left\"}}>\r\n            Сохранить\r\n          </Button>\r\n          </p>          \r\n        </DialogTitle>\r\n        </Dialog>   \r\n    </Card>\r\n\r\n    )\r\n};\r\n\r\nexport default InWork;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport './App.css';\nimport { TextField } from '@material-ui/core';\nimport InWork from './containers/inWorks';\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n    display: 'inline-block',\n    verticalAlign: 'top',\n    backgroundColor: '#D4D4D4',\n    width: '28.5%',\n    margin: '10px',\n    padding: '20px'\n  },\n  title: {\n    fontSize: 15,\n    color: '#404B5A',\n    margin: 0\n  },\n  action: {\n   padding: '0 5px',\n   marginTop: '10px',\n   height: 50\n  \n  },\n  input_text: {   \n    padding: 10,\n    display: 'block', \n    width: '95%', \n    fontSize: 'medium',\n    backgroundColor: '#fff',    \n    margin: '10px 0',\n    border: 'none'\n  },  \n  input_rewrite: {   \n    padding: 10,\n    display: 'block', \n    width: '95%',\n    color: \"#000\", \n    fontSize: 'medium',\n    backgroundColor: '#fff',    \n    margin: '10px 0',\n    border: 'none'\n  },  \n  text: {     \n    padding: 10,\n    fontSize: 'medium',\n    backgroundColor: '#fff',    \n    margin: '10px 0 0',\n    boxShadow: '0px 1px 1px rgba(0, 0, 0, 0.25)',\n  } \n});\n\nfunction App() {\n \n\n  const one_card = [{\"one\":\"Shop\",\"two\":\"You need going to shop\"}];\n  const two_card = [{\"one\":\"Sport\",\"two\":\"You need workout\"}];\n  const three_card = [{\"one\":\"Store\",\"two\":\"You need going to shop\"}];\n\n  const [open, open_dialog] = React.useState(false);\n  const [card_name, set_card_name] = React.useState();\n  const [index, set_index] = React.useState();\n  const [title_name, set_title_name] = React.useState();\n\n  const [inWork, add_to_inWork] = React.useState([{\"one\":\"Shop\",\"two\":\"You need going to shop\"}]);\n  const [card_inwork, add_card_inWork] = React.useState(true);\n  const [text_inWork, add_text_inWork] = React.useState();\n  const [text_inWork_rev, add_text_inWork_rev] = React.useState();\n\n  const [onControl, add_to_onControl] = React.useState([{\"one\":\"Sport\",\"two\":\"You need workout\"}]);\n  const [card_onControl, add_card_onControl] = React.useState(true);\n  const [text_onControl, add_text_onControl] = React.useState();\n  const [text_onControl_rev, add_text_onControl_rev] = React.useState();\n\n  const [enDed, add_to_enDed] = React.useState([{\"one\":\"Store\",\"two\":\"You need going to shop\"}]);\n  const [card_enDed, add_card_enDed] = React.useState(true);\n  const [text_enDed, add_text_enDed] = React.useState();\n  const [text_enDed_rev, add_text_enDed_rev] = React.useState();\n  \n  const saveTocard =(a)=> {\n    \n    if (title_name === 'inWork') {\n        var s = inWork.filter((i,index)=>index === a ? i.two = text_inWork_rev : i.two);\n       \n       return (\n          add_to_inWork(s)\n      )} else if ( title_name === 'onControl') {\n        var s = onControl.filter((i,index)=>index === a ? i.two = text_onControl_rev : i.two);\n       \n        return (\n           add_to_onControl(s)\n        )};    \n    \n  };\n\n  const addTextInWorkRev =(value)=>{\n    add_text_inWork_rev(value)\n  };\n\n  const handleClose =() => {\n    open_dialog(false)\n  };\n\n  const write_to_card = (a,b,c,d) => {\n    return (\n      open_dialog(true),\n      set_title_name(d),\n      set_card_name(a),\n      add_text_inWork_rev(b),\n      set_index(c)\n    )  \n  };\n\n  const add_new_card_inWork = () => {\n    var new_text = [{\"one\": text_inWork}];\n    return (\n      text_inWork ?      \n      (add_to_inWork(inWork.concat(new_text)),\n      add_card_inWork(true))\n      :\n      add_card_inWork(true)\n    );\n  };\n  const add_new_card_onControl = () => {\n    var new_text = [{\"one\": text_onControl}];\n    return (\n      text_onControl ?      \n      (add_to_onControl(onControl.concat(new_text)),\n      add_card_onControl(true))\n      :\n      add_card_onControl(true)\n    );\n  };\n  const add_new_card_enDed = () => {\n    var new_text = [{\"one\": text_enDed}];\n    return (\n      text_enDed ?     \n      (add_to_enDed(enDed.concat(new_text)),\n      add_card_enDed(true))\n      :\n      add_card_enDed(true)\n    );\n  };\n\n\n  return <div className=\"main_block\">\n\n    <InWork  name=\"В работе\" prev={one_card}/>\n    <InWork  name=\"На проверке\" prev={two_card}/>\n    <InWork  name=\"Завершено\" prev={three_card}/>\n\n\n    \n    {/* <Card className={classes.root}>     \n      <p className={classes.title}>На проверке</p>\n      {onControl.map(i=> <p className={classes.text} onClick={()=>write_to_card(i.one,i.two,index,'onControl')}>{i.one}</p>)}  \n     \n     \n      {card_onControl ?     \n        <Button className={classes.action} onClick={()=>add_card_onControl(false)}><span className=\"plus\">+</span> Добавить еще одну карточку</Button>\n     \n      : \n       <>\n          <input placeholder=\"Введите техт\"  type=\"text\" className={classes.input_text} onChange={(e)=>add_text_onControl(e.target.value)} />\n         \n          <Button size=\"medium\" onClick={()=>add_new_card_onControl()} variant=\"contained\" color=\"primary\">\n            Добавить карточку        \n          </Button>\n          <Button size=\"medium\" onClick={()=>add_card_onControl(true)} >\n            X Отмена      \n          </Button>\n       </>\n      }\n     \n    </Card> */}\n    {/* <Card className={classes.root}>     \n      <p className={classes.title}>Завершено</p>\n      {enDed.map(i=> <p className={classes.text} onClick={()=>write_to_card(i.one,i.two,index,'enDed')}>{i.one}</p>)}  \n       \n      {card_enDed ?\n        <Button className={classes.action} onClick={()=>add_card_enDed(false)}><span className=\"plus\">+</span> Добавить еще одну карточку</Button>\n      : \n       <>\n        <input placeholder=\"Введите техт\"  type=\"text\" className={classes.input_text} onChange={(e)=>add_text_enDed(e.target.value)} />\n         \n        <Button size=\"medium\" onClick={()=>add_new_card_enDed()} variant=\"contained\" color=\"primary\">\n          Добавить карточку        \n        </Button>\n        <Button size=\"medium\" onClick={()=>add_card_enDed(true)} style={{margin: 10}}>\n          X Отмена      \n        </Button>\n       </>\n      }     \n    </Card>\n\n    <Dialog\n      open={open}\n      maxWidth=\"sm\"       \n      fullWidth=\"true\"\n      onClose={handleClose}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n    >\n        <DialogTitle id=\"alert-dialog-title\"  style={{backgroundColor:\"#d4d4d4\"}}>\n          <p style={{margin: 0,color: '#000',fontSize: 24}}>{card_name}\n            <Button onClick={handleClose} color=\"primary\" style={{float:\"right\",marginTop: '-15px',marginRight: '-20px'}}>\n              X\n            </Button>\n          </p>\n        </DialogTitle>\n        <DialogContent  style={{backgroundColor:\"#d4d4d4\",padding:\"0 24px\"}}>         \n          <textarea\n            placeholder={text_inWork_rev} rows=\"5\" cols=\"20\"\n            style={{fontSize: 15,color: '#989898'}}\n            className={classes.input_rewrite}\n            onChange={(e)=>`addText${title_name}Rev(e.target.value)`} \n          />\n         \n        </DialogContent>\n        <DialogTitle  style={{backgroundColor:\"#d4d4d4\",paddingTop: 0}}>\n          <p>\n          <Button onClick={()=>saveTocard(index,\"inWork\")} color=\"primary\" variant=\"contained\" style={{float:\"left\"}}>\n            Сохранить\n          </Button>\n          </p>          \n        </DialogTitle>\n    </Dialog>    */}\n  </div>\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}